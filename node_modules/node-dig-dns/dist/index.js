'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash.compact');

var _lodash2 = _interopRequireDefault(_lodash);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseSection(values, section) {
  if (section === 'answer' || section === 'additional') {
    return {
      domain: values[0],
      type: values[3],
      ttl: values[1],
      class: values[2],
      value: values[values.length - 1]
    };
  }
  return values;
}

function parse() {
  var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var regex = /(;; )([^\s]+)( SECTION:)/g;
  var result = {};
  var data = output.split(/\r?\n/);
  var section = 'header';
  data.forEach(function (line, i) {
    var m = void 0;
    var changed = false;
    if (i && !line) section = '';else {
      do {
        m = regex.exec(line);
        if (m) {
          changed = true;
          section = m[2].toLowerCase();
        }
      } while (m);
    }
    if (section) {
      if (!result[section]) result[section] = [];
      if (!changed && line) {
        if (section === 'header') result[section].push(parseSection((0, _lodash2.default)(line.split(/\t/)), section));else result[section].push(parseSection((0, _lodash2.default)(line.split(/\s+/g)), section));
      }
    }
  });
  result.time = Number(data[data.length - 6].replace(';; Query time: ', '').replace(' msec', ''));
  result.server = data[data.length - 5].replace(';; SERVER: ', '');
  result.datetime = data[data.length - 4].replace(';; WHEN: ', '');
  result.size = Number(data[data.length - 3].replace(';; MSG SIZE  rcvd: ', ''));
  return result;
}

var dig = function dig() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var raw = options.raw === true ? options.raw : args.includes('+short');
  var digCMD = options.dig || 'dig';
  return new Promise(function (resolve, reject) {
    var process = _child_process2.default.spawn(digCMD, args);
    var shellOutput = '';

    process.stdout.on('data', function (chunk) {
      shellOutput += chunk;
    });

    process.stdout.on('error', function (error) {
      reject(error);
    });

    process.stdout.on('end', function () {
      var result = raw !== true ? parse(shellOutput) : shellOutput.replace(/\n$/, '');
      resolve(result);
    });
  });
};

exports.default = dig;

module.exports = dig;