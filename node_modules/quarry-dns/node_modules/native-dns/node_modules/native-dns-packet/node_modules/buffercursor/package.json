{
  "_args": [
    [
      {
        "raw": "buffercursor@https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
        "scope": null,
        "escapedName": "buffercursor",
        "name": "buffercursor",
        "rawSpec": "https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
        "spec": "https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
        "type": "remote"
      },
      "/home/silvnto/Documents/javascript-examples/examnotify/node_modules/quarry-dns"
    ]
  ],
  "_from": "https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
  "_id": "buffercursor@0.0.12",
  "_inCache": true,
  "_location": "/quarry-dns/native-dns/native-dns-packet/buffercursor",
  "_phantomChildren": {},
  "_requested": {
    "raw": "buffercursor@https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
    "scope": null,
    "escapedName": "buffercursor",
    "name": "buffercursor",
    "rawSpec": "https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
    "spec": "https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/quarry-dns/native-dns/native-dns-packet"
  ],
  "_resolved": "https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
  "_shasum": "78a9a7f4343ae7d820a8999acc80de591e25a779",
  "_shrinkwrap": null,
  "_spec": "buffercursor@https://registry.npmjs.org/buffercursor/-/buffercursor-0.0.12.tgz",
  "_where": "/home/silvnto/Documents/javascript-examples/examnotify/node_modules/quarry-dns",
  "author": {
    "name": "Timothy J Fontaine",
    "email": "tjfontaine@gmail.com",
    "url": "http://atxconsulting.com"
  },
  "bugs": {
    "url": "http://github.com/tjfontaine/node-buffercursor/issues"
  },
  "dependencies": {
    "verror": "^1.4.0"
  },
  "description": "A simple way to traverse a Buffer like a cursor, updating position along the way",
  "devDependencies": {},
  "engines": {
    "node": ">= 0.5.0"
  },
  "homepage": "http://github.com/tjfontaine/node-buffercursor",
  "keywords": [
    "buffer",
    "cursor",
    "stream"
  ],
  "main": "buffercursor.js",
  "name": "buffercursor",
  "optionalDependencies": {},
  "readme": "BufferCursor\n============\n\nThis is a simple module that allows you to traverse a Buffer iteratively. You\ncan read and write different types and the cursor's position will update with\nthe proper size, which you can see through `.tell()` you can also\n`.seek()`\n\n```javascript\nvar bc = new BufferCursor(buffer);\nbc.readUInt16BE();\nbc.readUInt8();\nbc.readUInt32BE();\nconsole.log(bc.tell());\n```\n\nWill output `7`\n\nMethods\n-------\n\nFor the most part `BufferCursor` and `Buffer` share the same methods, there's\njust a slight alteration in method signature, none of the methods take an\noffset.\n\nSo `.readUInt16LE(10)` in `Buffer` is equivalent to `bs.seek(10); bs.readUInt16LE();`\n\nAll `read[U]Int` and `write[U]Int` methods are reproduced, as are `toString`,\n`write`, `fill`, and `slice`. All of these methods will move the cursor through\nthe stream and do not take an offset parameter, where an `end` parameter would\nnormaly be used, here you supply a `length`.\n\nThe following are additional methods:\n\n * `seek(value)` -- Seek to an arbitrary position in the stream\n * `tell()` -- Return the current location in the stream\n * `eof()` -- Return true if at the end of the stream\n * `toByteArray([method])` -- This is a special helper method which will return\nthe *entire* stream (i.e. from the start) as an array of numbers.\n  - By default it will use `readUInt8` but you can pass in any\n`read[U]Int[8,16,32][LE,BE]` to change what the array is made of\n\nProperties\n----------\n\n * `.buffer` -- Access to the raw buffer\n * `.length` -- The size of the buffer\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tjfontaine/node-buffercursor.git"
  },
  "version": "0.0.12"
}
